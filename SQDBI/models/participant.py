from sqlalchemy import Column, String, Integer, Float, Boolean, BigInteger, ForeignKey, JSON
from sqlalchemy.orm import relationship
from SQDBI.models.base import Base

class Participant(Base):
    __tablename__ = 'participants'
    id = Column(Integer, primary_key=True, autoincrement=True)
    game_id = Column(String(255), ForeignKey('games.id'))
    game_duration = Column(Integer)
    puuid = Column(String(255))
    account_name = Column(String(255))
    account_tagline = Column(String(255))
    side = Column(String(10))
    win = Column(Boolean)
    team_position = Column(String(10))
    lane = Column(String(10))
    champion = Column(String(255))
    kills = Column(Integer)
    deaths = Column(Integer)
    assists = Column(Integer)
    summoner1_id = Column(Integer)
    summoner2_id = Column(Integer)
    gold_earned = Column(Integer)
    total_minions_killed = Column(Integer)
    total_neutral_minions_killed = Column(Integer)
    total_ally_jungle_minions_killed = Column(Integer)
    total_enemy_jungle_minions_killed = Column(Integer)
    early_surrender = Column(Boolean)
    surrender = Column(Boolean)
    first_blood = Column(Boolean)
    first_blood_assist = Column(Boolean)
    first_tower = Column(Boolean)
    first_tower_assist = Column(Boolean)
    damage_dealt_to_buildings = Column(Integer)
    turret_kills = Column(Integer)
    turrets_lost = Column(Integer)
    damage_dealt_to_objectives = Column(Integer)
    dragon_kills = Column(Integer)
    objectives_stolen = Column(Integer)
    longest_time_spent_living = Column(Integer)
    largest_killing_spree = Column(Integer)
    total_damage_dealt_champions = Column(Integer)
    total_damage_taken = Column(Integer)
    total_damage_self_mitigated = Column(Integer)
    total_damage_shielded_teammates = Column(Integer)
    total_heals_teammates = Column(Integer)
    total_time_crowd_controlled = Column(Integer)
    total_time_spent_dead = Column(Integer)
    vision_score = Column(Integer)
    wards_killed = Column(Integer)
    wards_placed = Column(Integer)
    control_wards_placed = Column(Integer)
    item0 = Column(Integer)
    item1 = Column(Integer)
    item2 = Column(Integer)
    item3 = Column(Integer)
    item4 = Column(Integer)
    item5 = Column(Integer)
    item6 = Column(Integer)
    perk_keystone = Column(Integer)
    perk_primary_row_1 = Column(Integer)
    perk_primary_row_2 = Column(Integer)
    perk_primary_row_3 = Column(Integer)
    perk_secondary_row_1 = Column(Integer)
    perk_secondary_row_2 = Column(Integer)
    perk_primary_style = Column(Integer)
    perk_secondary_style = Column(Integer)
    perk_shard_defense = Column(Integer)
    perk_shard_flex = Column(Integer)
    perk_shard_offense = Column(Integer)

    account_puuid = Column(String(255), ForeignKey('accounts.puuid'))
    player_id = Column(Integer, ForeignKey('players.id'))

    game = relationship('Game', back_populates='participants')
    account = relationship('Account', back_populates='games')
    player = relationship('Player', back_populates='solo_queue_games')
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.kda = self.calculate_kda()
        self.total_cs = self.total_minions_killed + self.total_neutral_minions_killed
        self.cspm = self.total_cs / (self.game.game_duration / 60)
    def calculate_kda(self):
        if self.deaths > 0:
            return (self.kills + self.assists) / self.deaths
        return self.kills + self.assists